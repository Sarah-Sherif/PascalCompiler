from token_types import TokenType


reserved_words = {
    "and": TokenType.AndKeyword,
    "array": TokenType.ArrayKeyword,
    "begin": TokenType.BeginKeyword,
    "case": TokenType.CaseKeyword,
    "const": TokenType.ConstKeyword,
    "div": TokenType.DivKeyword,
    "do": TokenType.DoKeyword,
    "downto": TokenType.DowntoKeyword,
    "else": TokenType.ElseKeyword,
    "end": TokenType.EndKeyword,
    "false": TokenType.FalseKeyword,
    "file": TokenType.FileKeyword,
    "for": TokenType.ForKeyword,
    "function": TokenType.FunctionKeyword,
    "goto": TokenType.GotoKeyword,
    "if": TokenType.IfKeyword,
    "in": TokenType.InKeyword,
    "label": TokenType.LabelKeyword,
    "main": TokenType.MainKeyword,
    "mod": TokenType.ModKeyword,
    "nil": TokenType.NilKeyword,
    "not": TokenType.NotKeyword,
    "of": TokenType.OfKeyword,
    "or": TokenType.OrKeyword,
    "packed": TokenType.PackedKeyword,
    "procedure": TokenType.ProcedureKeyword,
    "program": TokenType.ProgramKeyword,
    "read": TokenType.ReadKeyword,
    "readln": TokenType.ReadlnKeyword,
    "real": TokenType.RealKeyword,
    "record": TokenType.RecordKeyword,
    "repeat": TokenType.RepeatKeyword,
    "set": TokenType.SetKeyword,
    "string": TokenType.StringKeyword,
    "then": TokenType.ThenKeyword,
    "to": TokenType.ToKeyword,
    "true": TokenType.TrueKeyword,
    "type": TokenType.TypeKeyword,
    "until": TokenType.UntilKeyword,
    "var": TokenType.VarKeyword,
    "while": TokenType.WhileKeyword,
    "with": TokenType.WithKeyword,
    "write": TokenType.WriteKeyword,
    "writeln": TokenType.WritelnKeyword,
    "define": TokenType.DefineKeyword,
    "extern": TokenType.ExternKeyword,
    "external": TokenType.ExternalKeyword,
    "module": TokenType.ModuleKeyword,
    "otherwise": TokenType.OtherwiseKeyword,
    "private": TokenType.PrivateKeyword,
    "public": TokenType.PublicKeyword,
    "static": TokenType.StaticKeyword,
    "univ": TokenType.UnivKeyword,
    "boolean": TokenType.BooleanKeyword,
    "char": TokenType.CharKeyword,
    "integer": TokenType.IntegerKeyword,
}
